{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":1,"renderable":0},{"_id":"source/img/donate.jpg","path":"img/donate.jpg","modified":1,"renderable":0},{"_id":"themes/aircloud/source/css/aircloud.css","path":"css/aircloud.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.css.map","path":"css/aircloud.css.map","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/aircloud.less","path":"css/aircloud.less","modified":1,"renderable":1},{"_id":"themes/aircloud/source/css/gitment.css","path":"css/gitment.css","modified":1,"renderable":1},{"_id":"themes/aircloud/source/js/index.js","path":"js/index.js","modified":1,"renderable":1},{"_id":"themes/aircloud/source/js/gitment.js","path":"js/gitment.js","modified":1,"renderable":1},{"_id":"source/img/avatar.jpg","path":"img/avatar.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/CNAME","hash":"f03ad8038b73b0434298adcd451d205661718175","modified":1610110499287},{"_id":"themes/aircloud/.gitignore","hash":"5a4a925cfd624633dafaacaced416c8d7272dcef","modified":1610029731923},{"_id":"themes/aircloud/LICENSE","hash":"218b4bf797149a2751a015812a9adefe368185c1","modified":1610029731923},{"_id":"themes/aircloud/_config.yml","hash":"0ad3a6ab2c9bb07fb1e030052622fdcde5c6f28a","modified":1610029731924},{"_id":"source/404.md","hash":"83c2c6d587beaa967a976e5969d60fa97fcdbe55","modified":1610029731901},{"_id":"themes/aircloud/readme-en.md","hash":"2903b1e9db12cd72ed6f8c10be14cd7f6afd82cf","modified":1610029731927},{"_id":"themes/aircloud/readme.md","hash":"4be1fc64bd1dc335a986a39594564e89bd7eba43","modified":1610029731928},{"_id":"source/.DS_Store","hash":"768d096e157d2a39ad5bf68ac0e7888ac8a01e76","modified":1610033765977},{"_id":"themes/aircloud/layout/catagory.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731926},{"_id":"themes/aircloud/layout/page.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731927},{"_id":"source/_posts/git-commit.md","hash":"b3e4d9fe9eb291b163ca929937b7a10284e19a33","modified":1611334475855},{"_id":"source/about/index.md","hash":"bf78939cf96a5652e5d4ef91b52591fc408cf52d","modified":1610039170925},{"_id":"source/_posts/nvm-1.md","hash":"8ac18f21fd51775bf1ef386487dd263fff5841c7","modified":1611333644758},{"_id":"source/_posts/git-flow.md","hash":"d968ac35ad8d91f35adb2b653cc539ef81921357","modified":1611243076200},{"_id":"source/_posts/macos-bigsur.md","hash":"91d516715ef5f5e09d788eacc828537b217baff2","modified":1610984478950},{"_id":"source/_posts/okr.md","hash":"1a2bf7d4c7313b441e5dfc9d483d2136b3615724","modified":1611242805619},{"_id":"source/_posts/nvm.md","hash":"6bf5be6221379824c6b24a9052c69c2e0603efb4","modified":1610984483979},{"_id":"source/_posts/screen.md","hash":"3f880e7e07fa46ab1e228818862cc1138e8843e4","modified":1610985766338},{"_id":"source/_posts/taobao.md","hash":"6edb3de2acf13126723cdebf45c28657ce6ee3f1","modified":1611242376584},{"_id":"source/_posts/view-github.md","hash":"2614b27410b58225c3a9ebd26f4e3a977d77b395","modified":1610984547100},{"_id":"source/img/.DS_Store","hash":"abc209f99640e75a59e71cb8cf11d2daadc7f2bb","modified":1610033963981},{"_id":"source/tags/index.md","hash":"4e3dfcd992b0772a4b8b034fe41ead1cc7ce9903","modified":1610029731921},{"_id":"themes/aircloud/languages/en.yml","hash":"f3dd50ca369974ac7d335fb1cfabf4ebb04a64fa","modified":1610029731924},{"_id":"themes/aircloud/languages/zh.yml","hash":"4ceab966dbfddd5b699219abba399763bc374446","modified":1610038509674},{"_id":"themes/aircloud/layout/404.ejs","hash":"8a30233a7b99831bd771121b5f450aaba412e8d5","modified":1610029731925},{"_id":"themes/aircloud/layout/about.ejs","hash":"cec034166ce08d2f8c961178e07b2f0ceac95cf2","modified":1610029731926},{"_id":"themes/aircloud/layout/layout.ejs","hash":"20fa9ce91ae783652f672c68d8bc908aacc44ed0","modified":1610984929853},{"_id":"themes/aircloud/layout/index.ejs","hash":"09e2407d615be7fe7ac41d11df3b7026e7393080","modified":1610037721945},{"_id":"themes/aircloud/layout/archive.ejs","hash":"0f8a062f4f2f0648b23bd8c4a21945a6ca60dc1f","modified":1610029731926},{"_id":"themes/aircloud/layout/post.ejs","hash":"2eb5fc0c2bb801528c3db3b09e6cb4d073e3ad99","modified":1610029731927},{"_id":"themes/aircloud/layout/tags.ejs","hash":"1a174d9213d25d9bf6ef28aabdaea6661cdd88c8","modified":1610029731927},{"_id":"themes/aircloud/source/_less/about.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731929},{"_id":"themes/aircloud/source/_less/about.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731929},{"_id":"themes/aircloud/source/_less/diff.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731930},{"_id":"themes/aircloud/source/_less/diff.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731930},{"_id":"themes/aircloud/source/_less/page.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731932},{"_id":"themes/aircloud/source/_less/page.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731932},{"_id":"themes/aircloud/source/_less/theme.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731933},{"_id":"themes/aircloud/source/_less/theme.less","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1610029731933},{"_id":"source/_posts/screen/ppi.png","hash":"806e34036cce812ca9db216ea9a7a3921f30ce11","modified":1610983507574},{"_id":"themes/aircloud/layout/_partial/donate.ejs","hash":"81c976a3b7fa5c47ef61181d537220eaf1d55eac","modified":1610029731925},{"_id":"themes/aircloud/layout/_partial/head.ejs","hash":"8b12435adced0e54b1d18f07fc0c5ee250a27ba4","modified":1611065807358},{"_id":"themes/aircloud/layout/_partial/nav.ejs","hash":"079fa72aa7a02ee11f6a44a8a9e58eb80fe28190","modified":1610029731925},{"_id":"themes/aircloud/layout/_partial/footer.ejs","hash":"33db88f1b03548c5181c04d44387dc68a9c4cdf6","modified":1610035014490},{"_id":"themes/aircloud/layout/_partial/toc.ejs","hash":"41d11d159011466f0b6272aca9a74df8642b693f","modified":1610029731926},{"_id":"source/img/donate.jpg","hash":"758c948e8d11dc8105fdc844576db9b278d2247a","modified":1610032358742},{"_id":"themes/aircloud/source/css/aircloud.css","hash":"af30a261bea2f3e15539770f31b03f049d2fc3f1","modified":1610034528494},{"_id":"themes/aircloud/source/css/aircloud.css.map","hash":"50db34961d11f6f461e23912609d25141068a6fc","modified":1610029731935},{"_id":"themes/aircloud/source/css/aircloud.less","hash":"45cab2da310dbfcba37ac3db657db77b4adac60d","modified":1610029731935},{"_id":"themes/aircloud/source/css/gitment.css","hash":"926b553be983d6dd90bcb60c5d6d4ee215d268a6","modified":1610029731935},{"_id":"themes/aircloud/source/js/index.js","hash":"1fed4485eedf5309e504aec35596955e5d692c7d","modified":1610029731937},{"_id":"themes/aircloud/source/_less/archive.css","hash":"905efcc06a62d1e8b60df0e12434afa353378d3a","modified":1610029731929},{"_id":"themes/aircloud/source/_less/archive.less","hash":"5538d38614960e69b97a7f80f38b5933851212b8","modified":1610029731929},{"_id":"themes/aircloud/source/_less/common.css","hash":"64914aa6ecd5b948676870e0809e0f220b162e3b","modified":1610029731929},{"_id":"themes/aircloud/source/_less/common.less","hash":"8aef4d8cfdefbcd2e28d4985a4f79a5005ca0b6c","modified":1610029731930},{"_id":"themes/aircloud/source/_less/donate.css","hash":"1da3187f27f86f9feed58b7187ba1ec9e035b8f2","modified":1610032624413},{"_id":"themes/aircloud/source/_less/donate.less","hash":"531e8b863cb2b4bac4a984170b9f913496cd518b","modified":1610034858379},{"_id":"themes/aircloud/source/_less/gitment.css","hash":"7d560b64e367129f98424052c660ae82b03a1d02","modified":1610029731930},{"_id":"themes/aircloud/source/_less/gitment.less","hash":"916deb8ecdee798d7a9b43b544e31dfd5bbd6de4","modified":1610029731930},{"_id":"themes/aircloud/source/_less/hightlight.css","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1610029731930},{"_id":"themes/aircloud/source/_less/hightlight.less","hash":"4e5a9ec3e88fbc2ce0faabceff8d3f5099ea1012","modified":1610029731931},{"_id":"themes/aircloud/source/_less/index.css","hash":"52fe4d1b93dfb4c9c9d63e24862354b6a0ef47f8","modified":1610029731931},{"_id":"themes/aircloud/source/_less/index.less","hash":"502d689e3568056cc27dd4da7da2499b0be4253e","modified":1610029731931},{"_id":"themes/aircloud/source/_less/layout.css","hash":"40d7cadf42b130ea1b40de1ae73b2b00e27f476f","modified":1610029731931},{"_id":"themes/aircloud/source/_less/layout.less","hash":"194ac7db2eeee7307fcb7470302f8172100181fb","modified":1610029731931},{"_id":"themes/aircloud/source/_less/nav.css","hash":"32e352d71dc2e67d69a26d8b5116a27d8d2a7718","modified":1610029731932},{"_id":"themes/aircloud/source/_less/nav.less","hash":"627e33cafb4ca9c191053b10917fc21c68c6ee8c","modified":1610029731932},{"_id":"themes/aircloud/source/_less/post.css","hash":"4adf531589cb55413264c188b29ae47ab703beb8","modified":1610029731932},{"_id":"themes/aircloud/source/_less/post.less","hash":"bbbd81c03e7581950d82bf971eda49e8bed7bee1","modified":1610029731932},{"_id":"themes/aircloud/source/_less/tag.css","hash":"3250887aaae0bc62bd82082d000ce3de8cc55ab6","modified":1610029731932},{"_id":"themes/aircloud/source/_less/tag.less","hash":"47e1ce2f55e2b62beefd0f69dfe7deb594e7b309","modified":1610029731933},{"_id":"themes/aircloud/source/_less/toc.css","hash":"83b1a219e7fe66d9d6cc34600e5a16311381a883","modified":1610029731933},{"_id":"themes/aircloud/source/_less/toc.less","hash":"c873ce552b22b0aa2c51a386a91516cadf9160ba","modified":1610029731933},{"_id":"themes/aircloud/source/_less/variables.css","hash":"9768d38beea904c4febc704192a49c8f7ae6e06c","modified":1610029731934},{"_id":"themes/aircloud/source/_less/variables.less","hash":"49503f7a6c51edd6f1dbdea5345df6bb903b18a5","modified":1610029731934},{"_id":"source/_posts/git-commit/install.jpg","hash":"21e61bbdc3546acbc90b8e7f2915172e74f3389b","modified":1611334426645},{"_id":"source/_posts/git-commit/use.jpg","hash":"7f2e92e3cc832f3f449ed3e071ad5def1118f2b3","modified":1611334426685},{"_id":"themes/aircloud/source/_less/_partial/footer.css.map","hash":"9e8d4df5d08425de5a8b247d0dd8b805c6edc661","modified":1610029731928},{"_id":"themes/aircloud/source/_less/_partial/footer.less","hash":"d1469f97daf750f3e4be18c4d640772780c32a75","modified":1610029731929},{"_id":"themes/aircloud/source/_less/_partial/footer.css","hash":"e00d722211b4695449d72850340ac0dd701d6ede","modified":1610029731928},{"_id":"themes/aircloud/source/js/gitment.js","hash":"89687f8fffe1125e08323fd6635ca4e53771c05e","modified":1610029731936},{"_id":"source/_posts/screen/ip7.png","hash":"2fcbd8adc5ef2e6536a6388a39f8fb2e169023fc","modified":1610978776218},{"_id":"source/_posts/screen/ipx.png","hash":"f3fd83fbc91e68ab5dc10ec3b90917af17e7551f","modified":1610978776293},{"_id":"source/img/avatar.jpg","hash":"660dcabf8dedcc47cdac4805ca16d2dfe8a4c4a0","modified":1610033695943}],"Category":[],"Data":[],"Page":[{"layout":"404","description":"你来到了没有知识的荒原 :(","header-img":"img/404-bg.jpg","_content":"","source":"404.md","raw":"---\nlayout: 404\ndescription: \"你来到了没有知识的荒原 :(\"\nheader-img: \"img/404-bg.jpg\"\n---\n","date":"2021-01-10T13:06:47.887Z","updated":"2021-01-07T14:28:51.901Z","path":"404.html","title":"","comments":1,"_id":"ckk8iy2w20000mlq9w14c8otl","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"about","title":"About","date":"2021-01-07T17:00:00.000Z","comments":1,"_content":"\n\n> 大多数时候，懒惰总是战胜我们的“决心”\n\n* 每天做一道算法题\n* 每天关注行业新闻\n* 每周至少写一篇技术文章\n* ……\n\n有太多的理由可以阻止我们去完成计划，但是终究有一天自己会养成习惯，不断学习。\n\n* 2021.01.08\n\n人的本性就是呆在安逸圈，做着自己擅长的事情。但是，总有那么一些事情能刺激到你，让你有有勇气重新面对困难。\n\n比如，不甘平庸的心，和一封心仪团队发来拒绝你的邮件……\n\n失败不可怕，可怕的是接受失败。愿大家都能经历磨难，到达彼岸～","source":"about/index.md","raw":"---\nlayout: \"about\"\ntitle: \"About\"\ndate: 2021-01-08 01:00:00\ncomments: true\n---\n\n\n> 大多数时候，懒惰总是战胜我们的“决心”\n\n* 每天做一道算法题\n* 每天关注行业新闻\n* 每周至少写一篇技术文章\n* ……\n\n有太多的理由可以阻止我们去完成计划，但是终究有一天自己会养成习惯，不断学习。\n\n* 2021.01.08\n\n人的本性就是呆在安逸圈，做着自己擅长的事情。但是，总有那么一些事情能刺激到你，让你有有勇气重新面对困难。\n\n比如，不甘平庸的心，和一封心仪团队发来拒绝你的邮件……\n\n失败不可怕，可怕的是接受失败。愿大家都能经历磨难，到达彼岸～","updated":"2021-01-07T17:06:10.925Z","path":"about/index.html","_id":"ckk8iy2wn0002mlq9wz7cmxxu","content":"<blockquote>\n<p>大多数时候，懒惰总是战胜我们的“决心”</p>\n</blockquote>\n<ul>\n<li>每天做一道算法题</li>\n<li>每天关注行业新闻</li>\n<li>每周至少写一篇技术文章</li>\n<li>……</li>\n</ul>\n<p>有太多的理由可以阻止我们去完成计划，但是终究有一天自己会养成习惯，不断学习。</p>\n<ul>\n<li>2021.01.08</li>\n</ul>\n<p>人的本性就是呆在安逸圈，做着自己擅长的事情。但是，总有那么一些事情能刺激到你，让你有有勇气重新面对困难。</p>\n<p>比如，不甘平庸的心，和一封心仪团队发来拒绝你的邮件……</p>\n<p>失败不可怕，可怕的是接受失败。愿大家都能经历磨难，到达彼岸～</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>大多数时候，懒惰总是战胜我们的“决心”</p>\n</blockquote>\n<ul>\n<li>每天做一道算法题</li>\n<li>每天关注行业新闻</li>\n<li>每周至少写一篇技术文章</li>\n<li>……</li>\n</ul>\n<p>有太多的理由可以阻止我们去完成计划，但是终究有一天自己会养成习惯，不断学习。</p>\n<ul>\n<li>2021.01.08</li>\n</ul>\n<p>人的本性就是呆在安逸圈，做着自己擅长的事情。但是，总有那么一些事情能刺激到你，让你有有勇气重新面对困难。</p>\n<p>比如，不甘平庸的心，和一封心仪团队发来拒绝你的邮件……</p>\n<p>失败不可怕，可怕的是接受失败。愿大家都能经历磨难，到达彼岸～</p>\n"},{"layout":"tags","title":"Tags","_content":"","source":"tags/index.md","raw":"---\nlayout: \"tags\"\ntitle: \"Tags\"\n---\n","date":"2021-01-10T13:06:48.151Z","updated":"2021-01-07T14:28:51.921Z","path":"tags/index.html","comments":1,"_id":"ckk8iy2wp0004mlq9cc4a2aw5","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Git Commit Message规范","date":"2021-01-22T16:47:56.000Z","_content":"\n好的提交代码注释，能让我们更快定位问题，了解提交的内容。也是一个很值得实施的规范。\n\n### 1. 格式\n\n每次提交，Commit message 都包含三个部分：Header，Body，Footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n* Header是必须的，Body 和 Footer 可以省略。\n* Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n* type用于说明 commit 的类别，只允许以下7个标识。\n\n```\nfeat：新功能（feature）\nfix：修补bug\ndocs：文档（documentation）\nstyle： 格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n```\n\n### 2. Webstrom注释格式填充\n\nwebstrom -> performance -> plugins\n\n搜索 `Git Commit Template` 插件，点击 install\n![安装插件](./install.jpg)\n按照好后，原有提交界面会出现一个按钮，如下。\n![使用插件](./use.jpg)\n\n点击它，填充应该填充的部分，即自动生成符合规范的有效注释。\n\n","source":"_posts/git-commit.md","raw":"---\ntitle: Git Commit Message规范\ndate: 2021-01-23 00:47:56\ntags:\n    - Git\n---\n\n好的提交代码注释，能让我们更快定位问题，了解提交的内容。也是一个很值得实施的规范。\n\n### 1. 格式\n\n每次提交，Commit message 都包含三个部分：Header，Body，Footer。\n\n```\n<type>(<scope>): <subject>\n// 空一行\n<body>\n// 空一行\n<footer>\n```\n\n* Header是必须的，Body 和 Footer 可以省略。\n* Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。\n* type用于说明 commit 的类别，只允许以下7个标识。\n\n```\nfeat：新功能（feature）\nfix：修补bug\ndocs：文档（documentation）\nstyle： 格式（不影响代码运行的变动）\nrefactor：重构（即不是新增功能，也不是修改bug的代码变动）\ntest：增加测试\nchore：构建过程或辅助工具的变动\n```\n\n### 2. Webstrom注释格式填充\n\nwebstrom -> performance -> plugins\n\n搜索 `Git Commit Template` 插件，点击 install\n![安装插件](./install.jpg)\n按照好后，原有提交界面会出现一个按钮，如下。\n![使用插件](./use.jpg)\n\n点击它，填充应该填充的部分，即自动生成符合规范的有效注释。\n\n","slug":"git-commit","published":1,"updated":"2021-01-22T16:55:11.774Z","_id":"ckk8iy2wi0001mlq9nd81dy2e","comments":1,"layout":"post","photos":[],"link":"","content":"<p>好的提交代码注释，能让我们更快定位问题，了解提交的内容。也是一个很值得实施的规范。</p>\n<h3 id=\"1-格式\"><a href=\"#1-格式\" class=\"headerlink\" title=\"1. 格式\"></a>1. 格式</h3><p>每次提交，Commit message 都包含三个部分：Header，Body，Footer。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">&lt;type&gt;</span>(<span class=\"params\">&lt;scope&gt;</span>): <span class=\"params\">&lt;subject&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 空一行</span></span><br><span class=\"line\"><span class=\"params\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 空一行</span></span><br><span class=\"line\"><span class=\"params\">&lt;footer&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Header是必须的，Body 和 Footer 可以省略。</li>\n<li>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</li>\n<li>type用于说明 commit 的类别，只允许以下7个标识。</li>\n</ul>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat：新功能（<span class=\"built_in\">feature</span>）</span><br><span class=\"line\"><span class=\"built_in\">fix</span>：修补bug</span><br><span class=\"line\">docs：文档（documentation）</span><br><span class=\"line\"><span class=\"built_in\">style</span>： 格式（不影响代码运行的变动）</span><br><span class=\"line\">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class=\"line\">test：增加测试</span><br><span class=\"line\">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Webstrom注释格式填充\"><a href=\"#2-Webstrom注释格式填充\" class=\"headerlink\" title=\"2. Webstrom注释格式填充\"></a>2. Webstrom注释格式填充</h3><p>webstrom -&gt; performance -&gt; plugins</p>\n<p>搜索 <code>Git Commit Template</code> 插件，点击 install<br><img src=\"./install.jpg\" alt=\"安装插件\"><br>按照好后，原有提交界面会出现一个按钮，如下。<br><img src=\"./use.jpg\" alt=\"使用插件\"></p>\n<p>点击它，填充应该填充的部分，即自动生成符合规范的有效注释。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>好的提交代码注释，能让我们更快定位问题，了解提交的内容。也是一个很值得实施的规范。</p>\n<h3 id=\"1-格式\"><a href=\"#1-格式\" class=\"headerlink\" title=\"1. 格式\"></a>1. 格式</h3><p>每次提交，Commit message 都包含三个部分：Header，Body，Footer。</p>\n<figure class=\"highlight dts\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"params\">&lt;type&gt;</span>(<span class=\"params\">&lt;scope&gt;</span>): <span class=\"params\">&lt;subject&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 空一行</span></span><br><span class=\"line\"><span class=\"params\">&lt;body&gt;</span></span><br><span class=\"line\"><span class=\"comment\">// 空一行</span></span><br><span class=\"line\"><span class=\"params\">&lt;footer&gt;</span></span><br></pre></td></tr></table></figure>\n<ul>\n<li>Header是必须的，Body 和 Footer 可以省略。</li>\n<li>Header部分只有一行，包括三个字段：type（必需）、scope（可选）和subject（必需）。</li>\n<li>type用于说明 commit 的类别，只允许以下7个标识。</li>\n</ul>\n<figure class=\"highlight maxima\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">feat：新功能（<span class=\"built_in\">feature</span>）</span><br><span class=\"line\"><span class=\"built_in\">fix</span>：修补bug</span><br><span class=\"line\">docs：文档（documentation）</span><br><span class=\"line\"><span class=\"built_in\">style</span>： 格式（不影响代码运行的变动）</span><br><span class=\"line\">refactor：重构（即不是新增功能，也不是修改bug的代码变动）</span><br><span class=\"line\">test：增加测试</span><br><span class=\"line\">chore：构建过程或辅助工具的变动</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-Webstrom注释格式填充\"><a href=\"#2-Webstrom注释格式填充\" class=\"headerlink\" title=\"2. Webstrom注释格式填充\"></a>2. Webstrom注释格式填充</h3><p>webstrom -&gt; performance -&gt; plugins</p>\n<p>搜索 <code>Git Commit Template</code> 插件，点击 install<br><img src=\"./install.jpg\" alt=\"安装插件\"><br>按照好后，原有提交界面会出现一个按钮，如下。<br><img src=\"./use.jpg\" alt=\"使用插件\"></p>\n<p>点击它，填充应该填充的部分，即自动生成符合规范的有效注释。</p>\n"},{"title":"团队Git协作实践","date":"2021-01-21T15:29:03.000Z","_content":"\n## 描述\n\n本规范从以下两个方面规范团队git使用：\n\n1. Git分支操作规范\n2. Commit Message规范\n\n## 1. Git分支操作规范\n\n按照团队的情况做以下规范。\n\n### 1.1 分支说明\n\n| 分支英文名 | 分支中文名 | 解释 |\n| --- | --- | --- |\n| master | 主分支 |  稳定发布的代码|\n| test | 测试分支 | 只用于合并和测试的分支，发布到测试环境 |\n| feature | feature分支 |用于需求功能开发<br>基本格式：feature/name<br>（eg. feature/userManage） |\n| hotfix | hotfix分支 | 为解决线上突发问题的分支<br>基本格式：hotfix/date-description<br>（eg. hotfix/20200811-用户模块选中问题修复） |\n\n### 1.2 各分支操作\n\n#### master分支\n\nmaster分支，一直存在。\n\n* master合并的内容：本次上线的feature分支的需求。\n* master合并的时间：上线的时候。\n* master合并操作：只能由模块负责人进行操作，合并前需要review代码，要对风险负责。\n\n#### test分支\n\ntest分支，一直存在。\n\n* test分支的内容：合并当前要进行测试的feature分支。\n* test合并的时间：需要测试的时候。\n* test分支的合并要求：提测什么需求，就合并相关分支的代码（test分支只做合并操作）。\n\n#### feature分支\n\n按需创建，及时销毁。\n\n* feature分支的产生：从master上拉的一个新分支。\n* feature分支的合并到test，先在本地进行merge操作，解决冲突之后，再进行push。\n* feature分支的销毁：上线完毕后，由分支owner进行销毁。\n\n#### hotfix分支\n\n按需创建，及时销毁。\n\n* hotfix分支的产生：从master上拉的一个新分支。\n* hotfix分支的合并：如果需要经过测试，先合并到test分支，测试过后合并到master。如果属于紧急修复，响应时间作为第一参考标准的时候，经过自测，直接合并到master分支。\n* hotfix分支的销毁：上线完毕后，由分支owner进行销毁。\n\n### 1.3 分支操作流程\n\n1. 新的需求开发开始，先从 `master分支` 拉一个新的 `feature分支` ，分支需要遵循命名规范。\n2. 开发完成，把 `feature分支` 的代码合并到 `test分支` 。\n3. 测试阶段开始，测试提出的bug，在该 `feature分支` 上进行修复，修复完成持续合并到 `test分支`。\n4. 测试完毕后，收到测试结果邮件，需要发布release环境验证，在发布release环境之前，把 `master分支` 重新合并到 `feature分支`。\n5. release验收完成，需要正式上线，必须等产品确认才能把 `feature分支` 的代码合并到 `master分支` ，再进行发布生产环境。\n\ntips：hotfix分支的周期，同feature分支。区别点在于：hotfix在于线上问题的止损，出现问题，可能不会走测试流程。","source":"_posts/git-flow.md","raw":"---\ntitle: 团队Git协作实践\ndate: 2021-01-21 23:29:03\ntags:\n    - Git\n---\n\n## 描述\n\n本规范从以下两个方面规范团队git使用：\n\n1. Git分支操作规范\n2. Commit Message规范\n\n## 1. Git分支操作规范\n\n按照团队的情况做以下规范。\n\n### 1.1 分支说明\n\n| 分支英文名 | 分支中文名 | 解释 |\n| --- | --- | --- |\n| master | 主分支 |  稳定发布的代码|\n| test | 测试分支 | 只用于合并和测试的分支，发布到测试环境 |\n| feature | feature分支 |用于需求功能开发<br>基本格式：feature/name<br>（eg. feature/userManage） |\n| hotfix | hotfix分支 | 为解决线上突发问题的分支<br>基本格式：hotfix/date-description<br>（eg. hotfix/20200811-用户模块选中问题修复） |\n\n### 1.2 各分支操作\n\n#### master分支\n\nmaster分支，一直存在。\n\n* master合并的内容：本次上线的feature分支的需求。\n* master合并的时间：上线的时候。\n* master合并操作：只能由模块负责人进行操作，合并前需要review代码，要对风险负责。\n\n#### test分支\n\ntest分支，一直存在。\n\n* test分支的内容：合并当前要进行测试的feature分支。\n* test合并的时间：需要测试的时候。\n* test分支的合并要求：提测什么需求，就合并相关分支的代码（test分支只做合并操作）。\n\n#### feature分支\n\n按需创建，及时销毁。\n\n* feature分支的产生：从master上拉的一个新分支。\n* feature分支的合并到test，先在本地进行merge操作，解决冲突之后，再进行push。\n* feature分支的销毁：上线完毕后，由分支owner进行销毁。\n\n#### hotfix分支\n\n按需创建，及时销毁。\n\n* hotfix分支的产生：从master上拉的一个新分支。\n* hotfix分支的合并：如果需要经过测试，先合并到test分支，测试过后合并到master。如果属于紧急修复，响应时间作为第一参考标准的时候，经过自测，直接合并到master分支。\n* hotfix分支的销毁：上线完毕后，由分支owner进行销毁。\n\n### 1.3 分支操作流程\n\n1. 新的需求开发开始，先从 `master分支` 拉一个新的 `feature分支` ，分支需要遵循命名规范。\n2. 开发完成，把 `feature分支` 的代码合并到 `test分支` 。\n3. 测试阶段开始，测试提出的bug，在该 `feature分支` 上进行修复，修复完成持续合并到 `test分支`。\n4. 测试完毕后，收到测试结果邮件，需要发布release环境验证，在发布release环境之前，把 `master分支` 重新合并到 `feature分支`。\n5. release验收完成，需要正式上线，必须等产品确认才能把 `feature分支` 的代码合并到 `master分支` ，再进行发布生产环境。\n\ntips：hotfix分支的周期，同feature分支。区别点在于：hotfix在于线上问题的止损，出现问题，可能不会走测试流程。","slug":"git-flow","published":1,"updated":"2021-01-21T15:31:16.200Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2wo0003mlq9ig53ew6a","content":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>本规范从以下两个方面规范团队git使用：</p>\n<ol>\n<li>Git分支操作规范</li>\n<li>Commit Message规范</li>\n</ol>\n<h2 id=\"1-Git分支操作规范\"><a href=\"#1-Git分支操作规范\" class=\"headerlink\" title=\"1. Git分支操作规范\"></a>1. Git分支操作规范</h2><p>按照团队的情况做以下规范。</p>\n<h3 id=\"1-1-分支说明\"><a href=\"#1-1-分支说明\" class=\"headerlink\" title=\"1.1 分支说明\"></a>1.1 分支说明</h3><table>\n<thead>\n<tr>\n<th>分支英文名</th>\n<th>分支中文名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td>主分支</td>\n<td>稳定发布的代码</td>\n</tr>\n<tr>\n<td>test</td>\n<td>测试分支</td>\n<td>只用于合并和测试的分支，发布到测试环境</td>\n</tr>\n<tr>\n<td>feature</td>\n<td>feature分支</td>\n<td>用于需求功能开发<br>基本格式：feature/name<br>（eg. feature/userManage）</td>\n</tr>\n<tr>\n<td>hotfix</td>\n<td>hotfix分支</td>\n<td>为解决线上突发问题的分支<br>基本格式：hotfix/date-description<br>（eg. hotfix/20200811-用户模块选中问题修复）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-2-各分支操作\"><a href=\"#1-2-各分支操作\" class=\"headerlink\" title=\"1.2 各分支操作\"></a>1.2 各分支操作</h3><h4 id=\"master分支\"><a href=\"#master分支\" class=\"headerlink\" title=\"master分支\"></a>master分支</h4><p>master分支，一直存在。</p>\n<ul>\n<li>master合并的内容：本次上线的feature分支的需求。</li>\n<li>master合并的时间：上线的时候。</li>\n<li>master合并操作：只能由模块负责人进行操作，合并前需要review代码，要对风险负责。</li>\n</ul>\n<h4 id=\"test分支\"><a href=\"#test分支\" class=\"headerlink\" title=\"test分支\"></a>test分支</h4><p>test分支，一直存在。</p>\n<ul>\n<li>test分支的内容：合并当前要进行测试的feature分支。</li>\n<li>test合并的时间：需要测试的时候。</li>\n<li>test分支的合并要求：提测什么需求，就合并相关分支的代码（test分支只做合并操作）。</li>\n</ul>\n<h4 id=\"feature分支\"><a href=\"#feature分支\" class=\"headerlink\" title=\"feature分支\"></a>feature分支</h4><p>按需创建，及时销毁。</p>\n<ul>\n<li>feature分支的产生：从master上拉的一个新分支。</li>\n<li>feature分支的合并到test，先在本地进行merge操作，解决冲突之后，再进行push。</li>\n<li>feature分支的销毁：上线完毕后，由分支owner进行销毁。</li>\n</ul>\n<h4 id=\"hotfix分支\"><a href=\"#hotfix分支\" class=\"headerlink\" title=\"hotfix分支\"></a>hotfix分支</h4><p>按需创建，及时销毁。</p>\n<ul>\n<li>hotfix分支的产生：从master上拉的一个新分支。</li>\n<li>hotfix分支的合并：如果需要经过测试，先合并到test分支，测试过后合并到master。如果属于紧急修复，响应时间作为第一参考标准的时候，经过自测，直接合并到master分支。</li>\n<li>hotfix分支的销毁：上线完毕后，由分支owner进行销毁。</li>\n</ul>\n<h3 id=\"1-3-分支操作流程\"><a href=\"#1-3-分支操作流程\" class=\"headerlink\" title=\"1.3 分支操作流程\"></a>1.3 分支操作流程</h3><ol>\n<li>新的需求开发开始，先从 <code>master分支</code> 拉一个新的 <code>feature分支</code> ，分支需要遵循命名规范。</li>\n<li>开发完成，把 <code>feature分支</code> 的代码合并到 <code>test分支</code> 。</li>\n<li>测试阶段开始，测试提出的bug，在该 <code>feature分支</code> 上进行修复，修复完成持续合并到 <code>test分支</code>。</li>\n<li>测试完毕后，收到测试结果邮件，需要发布release环境验证，在发布release环境之前，把 <code>master分支</code> 重新合并到 <code>feature分支</code>。</li>\n<li>release验收完成，需要正式上线，必须等产品确认才能把 <code>feature分支</code> 的代码合并到 <code>master分支</code> ，再进行发布生产环境。</li>\n</ol>\n<p>tips：hotfix分支的周期，同feature分支。区别点在于：hotfix在于线上问题的止损，出现问题，可能不会走测试流程。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"描述\"><a href=\"#描述\" class=\"headerlink\" title=\"描述\"></a>描述</h2><p>本规范从以下两个方面规范团队git使用：</p>\n<ol>\n<li>Git分支操作规范</li>\n<li>Commit Message规范</li>\n</ol>\n<h2 id=\"1-Git分支操作规范\"><a href=\"#1-Git分支操作规范\" class=\"headerlink\" title=\"1. Git分支操作规范\"></a>1. Git分支操作规范</h2><p>按照团队的情况做以下规范。</p>\n<h3 id=\"1-1-分支说明\"><a href=\"#1-1-分支说明\" class=\"headerlink\" title=\"1.1 分支说明\"></a>1.1 分支说明</h3><table>\n<thead>\n<tr>\n<th>分支英文名</th>\n<th>分支中文名</th>\n<th>解释</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>master</td>\n<td>主分支</td>\n<td>稳定发布的代码</td>\n</tr>\n<tr>\n<td>test</td>\n<td>测试分支</td>\n<td>只用于合并和测试的分支，发布到测试环境</td>\n</tr>\n<tr>\n<td>feature</td>\n<td>feature分支</td>\n<td>用于需求功能开发<br>基本格式：feature/name<br>（eg. feature/userManage）</td>\n</tr>\n<tr>\n<td>hotfix</td>\n<td>hotfix分支</td>\n<td>为解决线上突发问题的分支<br>基本格式：hotfix/date-description<br>（eg. hotfix/20200811-用户模块选中问题修复）</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"1-2-各分支操作\"><a href=\"#1-2-各分支操作\" class=\"headerlink\" title=\"1.2 各分支操作\"></a>1.2 各分支操作</h3><h4 id=\"master分支\"><a href=\"#master分支\" class=\"headerlink\" title=\"master分支\"></a>master分支</h4><p>master分支，一直存在。</p>\n<ul>\n<li>master合并的内容：本次上线的feature分支的需求。</li>\n<li>master合并的时间：上线的时候。</li>\n<li>master合并操作：只能由模块负责人进行操作，合并前需要review代码，要对风险负责。</li>\n</ul>\n<h4 id=\"test分支\"><a href=\"#test分支\" class=\"headerlink\" title=\"test分支\"></a>test分支</h4><p>test分支，一直存在。</p>\n<ul>\n<li>test分支的内容：合并当前要进行测试的feature分支。</li>\n<li>test合并的时间：需要测试的时候。</li>\n<li>test分支的合并要求：提测什么需求，就合并相关分支的代码（test分支只做合并操作）。</li>\n</ul>\n<h4 id=\"feature分支\"><a href=\"#feature分支\" class=\"headerlink\" title=\"feature分支\"></a>feature分支</h4><p>按需创建，及时销毁。</p>\n<ul>\n<li>feature分支的产生：从master上拉的一个新分支。</li>\n<li>feature分支的合并到test，先在本地进行merge操作，解决冲突之后，再进行push。</li>\n<li>feature分支的销毁：上线完毕后，由分支owner进行销毁。</li>\n</ul>\n<h4 id=\"hotfix分支\"><a href=\"#hotfix分支\" class=\"headerlink\" title=\"hotfix分支\"></a>hotfix分支</h4><p>按需创建，及时销毁。</p>\n<ul>\n<li>hotfix分支的产生：从master上拉的一个新分支。</li>\n<li>hotfix分支的合并：如果需要经过测试，先合并到test分支，测试过后合并到master。如果属于紧急修复，响应时间作为第一参考标准的时候，经过自测，直接合并到master分支。</li>\n<li>hotfix分支的销毁：上线完毕后，由分支owner进行销毁。</li>\n</ul>\n<h3 id=\"1-3-分支操作流程\"><a href=\"#1-3-分支操作流程\" class=\"headerlink\" title=\"1.3 分支操作流程\"></a>1.3 分支操作流程</h3><ol>\n<li>新的需求开发开始，先从 <code>master分支</code> 拉一个新的 <code>feature分支</code> ，分支需要遵循命名规范。</li>\n<li>开发完成，把 <code>feature分支</code> 的代码合并到 <code>test分支</code> 。</li>\n<li>测试阶段开始，测试提出的bug，在该 <code>feature分支</code> 上进行修复，修复完成持续合并到 <code>test分支</code>。</li>\n<li>测试完毕后，收到测试结果邮件，需要发布release环境验证，在发布release环境之前，把 <code>master分支</code> 重新合并到 <code>feature分支</code>。</li>\n<li>release验收完成，需要正式上线，必须等产品确认才能把 <code>feature分支</code> 的代码合并到 <code>master分支</code> ，再进行发布生产环境。</li>\n</ol>\n<p>tips：hotfix分支的周期，同feature分支。区别点在于：hotfix在于线上问题的止损，出现问题，可能不会走测试流程。</p>\n"},{"title":"macOS Big Sur osx系统引导盘制作","date":"2021-01-07T09:37:22.000Z","_content":"> macOS启动优盘制作\n\n### 1.格式化U盘\n\n打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将 U 盘命名为「Install macOS Big Sur」\n\n### 2.下载系统，安装到本机应用\n\n系统在iTunes上下载即可\n\n\n### 3.使用命令行生成引导盘\n\n```\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/Install\\ macOS\\ Big\\ Sur /Applications/Install\\ macOS\\ Big\\ Sur.app —nointeraction\n```\n\n* 其中 /Volumes/Install\\ macOS\\ Big\\ Sur 的Install macOS Big Sur为U盘名（第一步格式化的时候用,命令行里空格要加\\）\n* Install macOS Big Sur.app 是下载的app的名字，和 Mojave各有不同","source":"_posts/macos-bigsur.md","raw":"---\ntitle: macOS Big Sur osx系统引导盘制作\ndate: 2021-01-07 17:37:22\ntags:\n    - 系统\n---\n> macOS启动优盘制作\n\n### 1.格式化U盘\n\n打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将 U 盘命名为「Install macOS Big Sur」\n\n### 2.下载系统，安装到本机应用\n\n系统在iTunes上下载即可\n\n\n### 3.使用命令行生成引导盘\n\n```\nsudo /Applications/Install\\ macOS\\ Big\\ Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/Install\\ macOS\\ Big\\ Sur /Applications/Install\\ macOS\\ Big\\ Sur.app —nointeraction\n```\n\n* 其中 /Volumes/Install\\ macOS\\ Big\\ Sur 的Install macOS Big Sur为U盘名（第一步格式化的时候用,命令行里空格要加\\）\n* Install macOS Big Sur.app 是下载的app的名字，和 Mojave各有不同","slug":"macos-bigsur","published":1,"updated":"2021-01-18T15:41:18.950Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2wr0005mlq91e79w0oo","content":"<blockquote>\n<p>macOS启动优盘制作</p>\n</blockquote>\n<h3 id=\"1-格式化U盘\"><a href=\"#1-格式化U盘\" class=\"headerlink\" title=\"1.格式化U盘\"></a>1.格式化U盘</h3><p>打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将 U 盘命名为「Install macOS Big Sur」</p>\n<h3 id=\"2-下载系统，安装到本机应用\"><a href=\"#2-下载系统，安装到本机应用\" class=\"headerlink\" title=\"2.下载系统，安装到本机应用\"></a>2.下载系统，安装到本机应用</h3><p>系统在iTunes上下载即可</p>\n<h3 id=\"3-使用命令行生成引导盘\"><a href=\"#3-使用命令行生成引导盘\" class=\"headerlink\" title=\"3.使用命令行生成引导盘\"></a>3.使用命令行生成引导盘</h3><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install<span class=\"string\">\\</span> macOS<span class=\"string\">\\</span> Big<span class=\"string\">\\</span> Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/Install<span class=\"string\">\\</span> macOS<span class=\"string\">\\</span> Big<span class=\"string\">\\</span> Sur /Applications/Install<span class=\"string\">\\</span> macOS<span class=\"string\">\\</span> Big<span class=\"string\">\\</span> Sur.app —nointeraction</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中 /Volumes/Install\\ macOS\\ Big\\ Sur 的Install macOS Big Sur为U盘名（第一步格式化的时候用,命令行里空格要加\\）</li>\n<li>Install macOS Big Sur.app 是下载的app的名字，和 Mojave各有不同</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>macOS启动优盘制作</p>\n</blockquote>\n<h3 id=\"1-格式化U盘\"><a href=\"#1-格式化U盘\" class=\"headerlink\" title=\"1.格式化U盘\"></a>1.格式化U盘</h3><p>打开 “应用程序 → 实用工具 → 磁盘工具”，将U盘「抹掉」(格式化) 成「Mac OS X 扩展（日志式）」格式、GUID 分区图，并将 U 盘命名为「Install macOS Big Sur」</p>\n<h3 id=\"2-下载系统，安装到本机应用\"><a href=\"#2-下载系统，安装到本机应用\" class=\"headerlink\" title=\"2.下载系统，安装到本机应用\"></a>2.下载系统，安装到本机应用</h3><p>系统在iTunes上下载即可</p>\n<h3 id=\"3-使用命令行生成引导盘\"><a href=\"#3-使用命令行生成引导盘\" class=\"headerlink\" title=\"3.使用命令行生成引导盘\"></a>3.使用命令行生成引导盘</h3><figure class=\"highlight livescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo /Applications/Install<span class=\"string\">\\</span> macOS<span class=\"string\">\\</span> Big<span class=\"string\">\\</span> Sur.app/Contents/Resources/createinstallmedia --volume /Volumes/Install<span class=\"string\">\\</span> macOS<span class=\"string\">\\</span> Big<span class=\"string\">\\</span> Sur /Applications/Install<span class=\"string\">\\</span> macOS<span class=\"string\">\\</span> Big<span class=\"string\">\\</span> Sur.app —nointeraction</span><br></pre></td></tr></table></figure>\n<ul>\n<li>其中 /Volumes/Install\\ macOS\\ Big\\ Sur 的Install macOS Big Sur为U盘名（第一步格式化的时候用,命令行里空格要加\\）</li>\n<li>Install macOS Big Sur.app 是下载的app的名字，和 Mojave各有不同</li>\n</ul>\n"},{"title":"nvm使用","date":"2021-01-22T06:24:48.000Z","_content":"\n接上文说到，我们使用nvm来维护我们的nodejs版本。\n\n主要就是使用nvm安装、查询、切换功能\n\n### check - 检查当前系统所使用的版本\n\n```\nnvm list\n```\n\n### list available versions - 列出已发布的可用版本\n\n```\nnvm ls-remote\n```\n\n### install - 安装某个版本\n\n```\nnvm install node # 安装最新稳定版\nnvm install 10.14.3 # 安装 10.14.3 版本\n```\n\n### using - 切换版本\n\n```\nnvm use node # 切换到最近版本\nnvm use 10.14.3 # 切换 10.14.3 版本\n```\n","source":"_posts/nvm-1.md","raw":"---\ntitle: nvm使用\ndate: 2021-01-22 14:24:48\ntags:\n    - 前端\n---\n\n接上文说到，我们使用nvm来维护我们的nodejs版本。\n\n主要就是使用nvm安装、查询、切换功能\n\n### check - 检查当前系统所使用的版本\n\n```\nnvm list\n```\n\n### list available versions - 列出已发布的可用版本\n\n```\nnvm ls-remote\n```\n\n### install - 安装某个版本\n\n```\nnvm install node # 安装最新稳定版\nnvm install 10.14.3 # 安装 10.14.3 版本\n```\n\n### using - 切换版本\n\n```\nnvm use node # 切换到最近版本\nnvm use 10.14.3 # 切换 10.14.3 版本\n```\n","slug":"nvm-1","published":1,"updated":"2021-01-22T16:40:44.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2wu0007mlq9dr3l47jl","content":"<p>接上文说到，我们使用nvm来维护我们的nodejs版本。</p>\n<p>主要就是使用nvm安装、查询、切换功能</p>\n<h3 id=\"check-检查当前系统所使用的版本\"><a href=\"#check-检查当前系统所使用的版本\" class=\"headerlink\" title=\"check - 检查当前系统所使用的版本\"></a>check - 检查当前系统所使用的版本</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"list-available-versions-列出已发布的可用版本\"><a href=\"#list-available-versions-列出已发布的可用版本\" class=\"headerlink\" title=\"list available versions - 列出已发布的可用版本\"></a>list available versions - 列出已发布的可用版本</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">nvm ls-remote</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"install-安装某个版本\"><a href=\"#install-安装某个版本\" class=\"headerlink\" title=\"install - 安装某个版本\"></a>install - 安装某个版本</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install <span class=\"keyword\">node</span> <span class=\"title\"># 安装最新稳定版</span></span><br><span class=\"line\"><span class=\"title\">nvm</span> install <span class=\"number\">10.14</span>.<span class=\"number\">3</span> <span class=\"comment\"># 安装 10.14.3 版本</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"using-切换版本\"><a href=\"#using-切换版本\" class=\"headerlink\" title=\"using - 切换版本\"></a>using - 切换版本</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use <span class=\"keyword\">node</span> <span class=\"title\"># 切换到最近版本</span></span><br><span class=\"line\"><span class=\"title\">nvm</span> use <span class=\"number\">10.14</span>.<span class=\"number\">3</span> <span class=\"comment\"># 切换 10.14.3 版本</span></span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p>接上文说到，我们使用nvm来维护我们的nodejs版本。</p>\n<p>主要就是使用nvm安装、查询、切换功能</p>\n<h3 id=\"check-检查当前系统所使用的版本\"><a href=\"#check-检查当前系统所使用的版本\" class=\"headerlink\" title=\"check - 检查当前系统所使用的版本\"></a>check - 检查当前系统所使用的版本</h3><figure class=\"highlight applescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm <span class=\"built_in\">list</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"list-available-versions-列出已发布的可用版本\"><a href=\"#list-available-versions-列出已发布的可用版本\" class=\"headerlink\" title=\"list available versions - 列出已发布的可用版本\"></a>list available versions - 列出已发布的可用版本</h3><figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">nvm ls-remote</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"install-安装某个版本\"><a href=\"#install-安装某个版本\" class=\"headerlink\" title=\"install - 安装某个版本\"></a>install - 安装某个版本</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm install <span class=\"keyword\">node</span> <span class=\"title\"># 安装最新稳定版</span></span><br><span class=\"line\"><span class=\"title\">nvm</span> install <span class=\"number\">10.14</span>.<span class=\"number\">3</span> <span class=\"comment\"># 安装 10.14.3 版本</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"using-切换版本\"><a href=\"#using-切换版本\" class=\"headerlink\" title=\"using - 切换版本\"></a>using - 切换版本</h3><figure class=\"highlight crmsh\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">nvm use <span class=\"keyword\">node</span> <span class=\"title\"># 切换到最近版本</span></span><br><span class=\"line\"><span class=\"title\">nvm</span> use <span class=\"number\">10.14</span>.<span class=\"number\">3</span> <span class=\"comment\"># 切换 10.14.3 版本</span></span><br></pre></td></tr></table></figure>\n"},{"title":"OKR工作法","date":"2021-01-21T15:22:12.000Z","_content":"\n## 1. 读书笔记\n\n《OKR工作法》为我们讲述了一个创业公司通过采用“OKR工作法”，从濒临破产->解决问题->快速发展的故事。\n\n本书前三章讲述了一个有梦想的茶叶创业公司，遇到的问题：\n\n* 迫切解决的问题多\n* 什么都想做\n* 创业成员各有各的想法和关注点\n* CEO和CTO、团队成员间沟通不顺畅\n* ……\n\n采用了很多办法，也没有得到有效的解决，于是这些问题差点导致创业团队四分五裂。他们意识到往往光有好的想法还不够，必须要有一套方法来确保梦想能实现。\n\n后来，投资人为他们寻找了一位深谙“OKR工作法”的新CTO，在新CTO“OKR工作法”的推进下，团队步上正规，持续发展壮大。\n\n第四、五、六章详述“OKR工作法”的实施细节、场景以及建议。\n\n## 2. 思考\n\n结合本书和网上的资料，个人认为，OKR工作法不太适用于欠缺产品、需求环节，更类似于外包性质的团队。因为这种团队往往很难接触到真正的用户，也很少拿到生产数据，也无权针对某个问题，自发性对产品进行迭代更新。但是，如果将其作为员工的发展引导，倒不失为一个好的方案。\n\n## 3. OKR解析\n\n* O：Objective 目标、意图\n* KR：Key Results 关键成果\n\n强调用关键结果衡量工作绩效，每周一盘点执行过程，使用四象限图展示ORK:\n\n* 本周关注的任务\n* OKR当前状态\n* 未来四周计划\n* 状态指标\n\n每周五举办“庆祝”会议，大家分享成果，交流心得。\n\nOKR用来设定目标非常棒，但是没有一个系统能替你完成它。事情失败很容易，成功太难。OKR让所有人为目标承担责任，明确如何协作、明确前进方向，每周重复，那么OKR一定会实现。\n\n遵循SMART原则\n\n* Specific（具体的）\n* Measurable（可衡量的）\n* Attainable（可实现的）\n* Relevant（相关的）\n* Time-Based（有时间限制的）\n\n遵循五四原则\n\n* 不超过5个目标（O）\n* 每个目标（O）不超过4个KR（关键结果）","source":"_posts/okr.md","raw":"---\ntitle: OKR工作法\ndate: 2021-01-21 23:22:12\ntags:\n    - 工作方法\n---\n\n## 1. 读书笔记\n\n《OKR工作法》为我们讲述了一个创业公司通过采用“OKR工作法”，从濒临破产->解决问题->快速发展的故事。\n\n本书前三章讲述了一个有梦想的茶叶创业公司，遇到的问题：\n\n* 迫切解决的问题多\n* 什么都想做\n* 创业成员各有各的想法和关注点\n* CEO和CTO、团队成员间沟通不顺畅\n* ……\n\n采用了很多办法，也没有得到有效的解决，于是这些问题差点导致创业团队四分五裂。他们意识到往往光有好的想法还不够，必须要有一套方法来确保梦想能实现。\n\n后来，投资人为他们寻找了一位深谙“OKR工作法”的新CTO，在新CTO“OKR工作法”的推进下，团队步上正规，持续发展壮大。\n\n第四、五、六章详述“OKR工作法”的实施细节、场景以及建议。\n\n## 2. 思考\n\n结合本书和网上的资料，个人认为，OKR工作法不太适用于欠缺产品、需求环节，更类似于外包性质的团队。因为这种团队往往很难接触到真正的用户，也很少拿到生产数据，也无权针对某个问题，自发性对产品进行迭代更新。但是，如果将其作为员工的发展引导，倒不失为一个好的方案。\n\n## 3. OKR解析\n\n* O：Objective 目标、意图\n* KR：Key Results 关键成果\n\n强调用关键结果衡量工作绩效，每周一盘点执行过程，使用四象限图展示ORK:\n\n* 本周关注的任务\n* OKR当前状态\n* 未来四周计划\n* 状态指标\n\n每周五举办“庆祝”会议，大家分享成果，交流心得。\n\nOKR用来设定目标非常棒，但是没有一个系统能替你完成它。事情失败很容易，成功太难。OKR让所有人为目标承担责任，明确如何协作、明确前进方向，每周重复，那么OKR一定会实现。\n\n遵循SMART原则\n\n* Specific（具体的）\n* Measurable（可衡量的）\n* Attainable（可实现的）\n* Relevant（相关的）\n* Time-Based（有时间限制的）\n\n遵循五四原则\n\n* 不超过5个目标（O）\n* 每个目标（O）不超过4个KR（关键结果）","slug":"okr","published":1,"updated":"2021-01-21T15:26:45.619Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2ww0008mlq9xpnpe7ei","content":"<h2 id=\"1-读书笔记\"><a href=\"#1-读书笔记\" class=\"headerlink\" title=\"1. 读书笔记\"></a>1. 读书笔记</h2><p>《OKR工作法》为我们讲述了一个创业公司通过采用“OKR工作法”，从濒临破产-&gt;解决问题-&gt;快速发展的故事。</p>\n<p>本书前三章讲述了一个有梦想的茶叶创业公司，遇到的问题：</p>\n<ul>\n<li>迫切解决的问题多</li>\n<li>什么都想做</li>\n<li>创业成员各有各的想法和关注点</li>\n<li>CEO和CTO、团队成员间沟通不顺畅</li>\n<li>……</li>\n</ul>\n<p>采用了很多办法，也没有得到有效的解决，于是这些问题差点导致创业团队四分五裂。他们意识到往往光有好的想法还不够，必须要有一套方法来确保梦想能实现。</p>\n<p>后来，投资人为他们寻找了一位深谙“OKR工作法”的新CTO，在新CTO“OKR工作法”的推进下，团队步上正规，持续发展壮大。</p>\n<p>第四、五、六章详述“OKR工作法”的实施细节、场景以及建议。</p>\n<h2 id=\"2-思考\"><a href=\"#2-思考\" class=\"headerlink\" title=\"2. 思考\"></a>2. 思考</h2><p>结合本书和网上的资料，个人认为，OKR工作法不太适用于欠缺产品、需求环节，更类似于外包性质的团队。因为这种团队往往很难接触到真正的用户，也很少拿到生产数据，也无权针对某个问题，自发性对产品进行迭代更新。但是，如果将其作为员工的发展引导，倒不失为一个好的方案。</p>\n<h2 id=\"3-OKR解析\"><a href=\"#3-OKR解析\" class=\"headerlink\" title=\"3. OKR解析\"></a>3. OKR解析</h2><ul>\n<li>O：Objective 目标、意图</li>\n<li>KR：Key Results 关键成果</li>\n</ul>\n<p>强调用关键结果衡量工作绩效，每周一盘点执行过程，使用四象限图展示ORK:</p>\n<ul>\n<li>本周关注的任务</li>\n<li>OKR当前状态</li>\n<li>未来四周计划</li>\n<li>状态指标</li>\n</ul>\n<p>每周五举办“庆祝”会议，大家分享成果，交流心得。</p>\n<p>OKR用来设定目标非常棒，但是没有一个系统能替你完成它。事情失败很容易，成功太难。OKR让所有人为目标承担责任，明确如何协作、明确前进方向，每周重复，那么OKR一定会实现。</p>\n<p>遵循SMART原则</p>\n<ul>\n<li>Specific（具体的）</li>\n<li>Measurable（可衡量的）</li>\n<li>Attainable（可实现的）</li>\n<li>Relevant（相关的）</li>\n<li>Time-Based（有时间限制的）</li>\n</ul>\n<p>遵循五四原则</p>\n<ul>\n<li>不超过5个目标（O）</li>\n<li>每个目标（O）不超过4个KR（关键结果）</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-读书笔记\"><a href=\"#1-读书笔记\" class=\"headerlink\" title=\"1. 读书笔记\"></a>1. 读书笔记</h2><p>《OKR工作法》为我们讲述了一个创业公司通过采用“OKR工作法”，从濒临破产-&gt;解决问题-&gt;快速发展的故事。</p>\n<p>本书前三章讲述了一个有梦想的茶叶创业公司，遇到的问题：</p>\n<ul>\n<li>迫切解决的问题多</li>\n<li>什么都想做</li>\n<li>创业成员各有各的想法和关注点</li>\n<li>CEO和CTO、团队成员间沟通不顺畅</li>\n<li>……</li>\n</ul>\n<p>采用了很多办法，也没有得到有效的解决，于是这些问题差点导致创业团队四分五裂。他们意识到往往光有好的想法还不够，必须要有一套方法来确保梦想能实现。</p>\n<p>后来，投资人为他们寻找了一位深谙“OKR工作法”的新CTO，在新CTO“OKR工作法”的推进下，团队步上正规，持续发展壮大。</p>\n<p>第四、五、六章详述“OKR工作法”的实施细节、场景以及建议。</p>\n<h2 id=\"2-思考\"><a href=\"#2-思考\" class=\"headerlink\" title=\"2. 思考\"></a>2. 思考</h2><p>结合本书和网上的资料，个人认为，OKR工作法不太适用于欠缺产品、需求环节，更类似于外包性质的团队。因为这种团队往往很难接触到真正的用户，也很少拿到生产数据，也无权针对某个问题，自发性对产品进行迭代更新。但是，如果将其作为员工的发展引导，倒不失为一个好的方案。</p>\n<h2 id=\"3-OKR解析\"><a href=\"#3-OKR解析\" class=\"headerlink\" title=\"3. OKR解析\"></a>3. OKR解析</h2><ul>\n<li>O：Objective 目标、意图</li>\n<li>KR：Key Results 关键成果</li>\n</ul>\n<p>强调用关键结果衡量工作绩效，每周一盘点执行过程，使用四象限图展示ORK:</p>\n<ul>\n<li>本周关注的任务</li>\n<li>OKR当前状态</li>\n<li>未来四周计划</li>\n<li>状态指标</li>\n</ul>\n<p>每周五举办“庆祝”会议，大家分享成果，交流心得。</p>\n<p>OKR用来设定目标非常棒，但是没有一个系统能替你完成它。事情失败很容易，成功太难。OKR让所有人为目标承担责任，明确如何协作、明确前进方向，每周重复，那么OKR一定会实现。</p>\n<p>遵循SMART原则</p>\n<ul>\n<li>Specific（具体的）</li>\n<li>Measurable（可衡量的）</li>\n<li>Attainable（可实现的）</li>\n<li>Relevant（相关的）</li>\n<li>Time-Based（有时间限制的）</li>\n</ul>\n<p>遵循五四原则</p>\n<ul>\n<li>不超过5个目标（O）</li>\n<li>每个目标（O）不超过4个KR（关键结果）</li>\n</ul>\n"},{"title":"macOS安装nvm 实现nodejs版本快速切换","date":"2021-01-10T09:45:10.000Z","_content":"\n团队项目新老共存的情况下，某些时候不得不频繁切换nodejs版本。n模块比较难搞，有一些问题，还是推荐使用nvm。\n\n首先，强烈推荐看官网安装：https://github.com/nvm-sh/nvm\n（ps：因为如果插件更新了，下边的教程可能没那么及时更新～）\n\n## 1. 命令行下载及安装\n打开命令行工具，输入以下命令，等待安装成功\n\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash\n```\n\n## 2. shell的配置\n安装完成后，注意区分你的shell是用的zsh和bsah，这里我们不做展开了，感兴趣的可以去看看这两个的区别。\n\n了解自己用的shell后，进行shell的配置如下\n\n```\n$ cd ~\n\n//下边二选一\n//如果是： zsh\n$ vim ~/.zshrc\n\n//如果是：bash\n$ vim .bash_profile\n```\n\n文件里加入（保存退出是用 `esc` 之后输入 `:wq`）\n\n```\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\n```\n\n## 3. 刷新source\n\n```\n// 也是二选一\n// zsh\n$ source ~/.zshrc\n// bash\n$ source .bash_profile\n```\n\n## 4. 验证\n\n命令行中，输入\n\n```\nnvm v\n```\n\n如果正常返回版本号，就ok了！\n","source":"_posts/nvm.md","raw":"---\ntitle: macOS安装nvm 实现nodejs版本快速切换\ndate: 2021-01-10 17:45:10\ntags:\n    - 系统\n---\n\n团队项目新老共存的情况下，某些时候不得不频繁切换nodejs版本。n模块比较难搞，有一些问题，还是推荐使用nvm。\n\n首先，强烈推荐看官网安装：https://github.com/nvm-sh/nvm\n（ps：因为如果插件更新了，下边的教程可能没那么及时更新～）\n\n## 1. 命令行下载及安装\n打开命令行工具，输入以下命令，等待安装成功\n\n```\ncurl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.37.2/install.sh | bash\n```\n\n## 2. shell的配置\n安装完成后，注意区分你的shell是用的zsh和bsah，这里我们不做展开了，感兴趣的可以去看看这两个的区别。\n\n了解自己用的shell后，进行shell的配置如下\n\n```\n$ cd ~\n\n//下边二选一\n//如果是： zsh\n$ vim ~/.zshrc\n\n//如果是：bash\n$ vim .bash_profile\n```\n\n文件里加入（保存退出是用 `esc` 之后输入 `:wq`）\n\n```\nexport NVM_DIR=~/.nvm\nsource $(brew --prefix nvm)/nvm.sh\n```\n\n## 3. 刷新source\n\n```\n// 也是二选一\n// zsh\n$ source ~/.zshrc\n// bash\n$ source .bash_profile\n```\n\n## 4. 验证\n\n命令行中，输入\n\n```\nnvm v\n```\n\n如果正常返回版本号，就ok了！\n","slug":"nvm","published":1,"updated":"2021-01-18T15:41:23.979Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2wx0009mlq9z1i9sxnt","content":"<p>团队项目新老共存的情况下，某些时候不得不频繁切换nodejs版本。n模块比较难搞，有一些问题，还是推荐使用nvm。</p>\n<p>首先，强烈推荐看官网安装：<a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm</a><br>（ps：因为如果插件更新了，下边的教程可能没那么及时更新～）</p>\n<h2 id=\"1-命令行下载及安装\"><a href=\"#1-命令行下载及安装\" class=\"headerlink\" title=\"1. 命令行下载及安装\"></a>1. 命令行下载及安装</h2><p>打开命令行工具，输入以下命令，等待安装成功</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -<span class=\"keyword\">o</span>- http<span class=\"variable\">s:</span>//raw.githubusercontent.<span class=\"keyword\">com</span>/nvm-<span class=\"keyword\">sh</span>/nvm/v0.<span class=\"number\">37.2</span>/install.<span class=\"keyword\">sh</span> | bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-shell的配置\"><a href=\"#2-shell的配置\" class=\"headerlink\" title=\"2. shell的配置\"></a>2. shell的配置</h2><p>安装完成后，注意区分你的shell是用的zsh和bsah，这里我们不做展开了，感兴趣的可以去看看这两个的区别。</p>\n<p>了解自己用的shell后，进行shell的配置如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~</span></span><br><span class=\"line\"></span><br><span class=\"line\">//下边二选一</span><br><span class=\"line\">//如果是： zsh</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim ~/.zshrc</span></span><br><span class=\"line\"></span><br><span class=\"line\">//如果是：bash</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim .bash_profile</span></span><br></pre></td></tr></table></figure>\n<p>文件里加入（保存退出是用 <code>esc</code> 之后输入 <code>:wq</code>）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">NVM_DIR</span>=~/.nvm</span><br><span class=\"line\">source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-刷新source\"><a href=\"#3-刷新source\" class=\"headerlink\" title=\"3. 刷新source\"></a>3. 刷新source</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 也是二选一</span><br><span class=\"line\">// zsh</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.zshrc</span></span><br><span class=\"line\">// bash</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> .bash_profile</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-验证\"><a href=\"#4-验证\" class=\"headerlink\" title=\"4. 验证\"></a>4. 验证</h2><p>命令行中，输入</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">nvm v</span></span><br></pre></td></tr></table></figure>\n<p>如果正常返回版本号，就ok了！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>团队项目新老共存的情况下，某些时候不得不频繁切换nodejs版本。n模块比较难搞，有一些问题，还是推荐使用nvm。</p>\n<p>首先，强烈推荐看官网安装：<a href=\"https://github.com/nvm-sh/nvm\" target=\"_blank\" rel=\"noopener\">https://github.com/nvm-sh/nvm</a><br>（ps：因为如果插件更新了，下边的教程可能没那么及时更新～）</p>\n<h2 id=\"1-命令行下载及安装\"><a href=\"#1-命令行下载及安装\" class=\"headerlink\" title=\"1. 命令行下载及安装\"></a>1. 命令行下载及安装</h2><p>打开命令行工具，输入以下命令，等待安装成功</p>\n<figure class=\"highlight vim\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">curl -<span class=\"keyword\">o</span>- http<span class=\"variable\">s:</span>//raw.githubusercontent.<span class=\"keyword\">com</span>/nvm-<span class=\"keyword\">sh</span>/nvm/v0.<span class=\"number\">37.2</span>/install.<span class=\"keyword\">sh</span> | bash</span><br></pre></td></tr></table></figure>\n<h2 id=\"2-shell的配置\"><a href=\"#2-shell的配置\" class=\"headerlink\" title=\"2. shell的配置\"></a>2. shell的配置</h2><p>安装完成后，注意区分你的shell是用的zsh和bsah，这里我们不做展开了，感兴趣的可以去看看这两个的区别。</p>\n<p>了解自己用的shell后，进行shell的配置如下</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">cd</span> ~</span></span><br><span class=\"line\"></span><br><span class=\"line\">//下边二选一</span><br><span class=\"line\">//如果是： zsh</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim ~/.zshrc</span></span><br><span class=\"line\"></span><br><span class=\"line\">//如果是：bash</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> vim .bash_profile</span></span><br></pre></td></tr></table></figure>\n<p>文件里加入（保存退出是用 <code>esc</code> 之后输入 <code>:wq</code>）</p>\n<figure class=\"highlight routeros\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"builtin-name\">export</span> <span class=\"attribute\">NVM_DIR</span>=~/.nvm</span><br><span class=\"line\">source $(brew --prefix nvm)/nvm.sh</span><br></pre></td></tr></table></figure>\n<h2 id=\"3-刷新source\"><a href=\"#3-刷新source\" class=\"headerlink\" title=\"3. 刷新source\"></a>3. 刷新source</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 也是二选一</span><br><span class=\"line\">// zsh</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> ~/.zshrc</span></span><br><span class=\"line\">// bash</span><br><span class=\"line\"><span class=\"meta\">$</span><span class=\"bash\"> <span class=\"built_in\">source</span> .bash_profile</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"4-验证\"><a href=\"#4-验证\" class=\"headerlink\" title=\"4. 验证\"></a>4. 验证</h2><p>命令行中，输入</p>\n<figure class=\"highlight ebnf\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"attribute\">nvm v</span></span><br></pre></td></tr></table></figure>\n<p>如果正常返回版本号，就ok了！</p>\n"},{"title":"前端设备参数详解","date":"2021-01-18T13:23:34.000Z","_content":"\n设备屏幕，有一些容易被我们忽略的知识点，特别是在做响应式的时候，我们老是会对一些基础的设备概念产生一些疑问，例如：\n\n1. px、pt有啥区别呀？\n2. 移动端到底能不能用px？\n\n我们先了解以下的一些概念。\n\n## 1. 物理像素 — Device Pixels\n\n显示屏的成像原理：通过一系列的小点排列成一个大的矩形，不同的小点通过显示不同的颜色来显示成图像。\n\n单位pt，属于真正的绝对单位，代表一个像素点。\n\n## 2. 逻辑像素 - Logical Pixel\n\n逻辑像素也可以称为设备独立像素 DIP(Device independent Pixel)\n\nCSS像素单位是px（CSS pixel），浏览器里的一切长度都是以 px（CSS像素）为单位。\n\n> 一般情况下来说， CSS像素 = 独立像素 = 逻辑像素 \n\n## 3. 设备像素比 — Device Pixel Ratio\n\n设备像素比(DPR)是默认缩放为100%的情况下，物理像素和逻辑像素的比值\n\n> DPR = 物理像素 / 逻辑像素(某一方向上)\n\n在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它就是DPR。\n\n```javascript\n> window.devicePixelRatio\n```\n\n例如 IPhoneX 的 devicePixelRatio = 3，如下图。\n\n![IPhoneX DPR](ipx.png)\n\n而前几代 iphone 6/7/8 采用的同样的屏幕，devicePixelRatio = 2\n\n![old IPhone DPR](ip7.png)\n\n所以 IPhoneX 的屏幕比 IPhone7 更高清。\n\n## 4. 像素密度 - Pixels Per Inch\n\n每英寸像素取值，更确切的说法应该是像素密度，也就是衡量单位物理面积内拥有像素值的情况。\n\n![PPI](ppi.png)\n\n高PPI的设备中，一个CSS像素通常等于两个甚至三个物理像素。\n\n> PPI通常是判断设备屏幕清晰度的重要参数，所以我们买设备的时候可以重点关注这个参数哟（设备分辨率高可不一定代表高清哟～）\n\n","source":"_posts/screen.md","raw":"---\ntitle: 前端设备参数详解\ndate: 2021-01-18 21:23:34\ntags:\n    - 前端\n---\n\n设备屏幕，有一些容易被我们忽略的知识点，特别是在做响应式的时候，我们老是会对一些基础的设备概念产生一些疑问，例如：\n\n1. px、pt有啥区别呀？\n2. 移动端到底能不能用px？\n\n我们先了解以下的一些概念。\n\n## 1. 物理像素 — Device Pixels\n\n显示屏的成像原理：通过一系列的小点排列成一个大的矩形，不同的小点通过显示不同的颜色来显示成图像。\n\n单位pt，属于真正的绝对单位，代表一个像素点。\n\n## 2. 逻辑像素 - Logical Pixel\n\n逻辑像素也可以称为设备独立像素 DIP(Device independent Pixel)\n\nCSS像素单位是px（CSS pixel），浏览器里的一切长度都是以 px（CSS像素）为单位。\n\n> 一般情况下来说， CSS像素 = 独立像素 = 逻辑像素 \n\n## 3. 设备像素比 — Device Pixel Ratio\n\n设备像素比(DPR)是默认缩放为100%的情况下，物理像素和逻辑像素的比值\n\n> DPR = 物理像素 / 逻辑像素(某一方向上)\n\n在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它就是DPR。\n\n```javascript\n> window.devicePixelRatio\n```\n\n例如 IPhoneX 的 devicePixelRatio = 3，如下图。\n\n![IPhoneX DPR](ipx.png)\n\n而前几代 iphone 6/7/8 采用的同样的屏幕，devicePixelRatio = 2\n\n![old IPhone DPR](ip7.png)\n\n所以 IPhoneX 的屏幕比 IPhone7 更高清。\n\n## 4. 像素密度 - Pixels Per Inch\n\n每英寸像素取值，更确切的说法应该是像素密度，也就是衡量单位物理面积内拥有像素值的情况。\n\n![PPI](ppi.png)\n\n高PPI的设备中，一个CSS像素通常等于两个甚至三个物理像素。\n\n> PPI通常是判断设备屏幕清晰度的重要参数，所以我们买设备的时候可以重点关注这个参数哟（设备分辨率高可不一定代表高清哟～）\n\n","slug":"screen","published":1,"updated":"2021-01-18T16:02:46.338Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2x0000cmlq93ad0zjvq","content":"<p>设备屏幕，有一些容易被我们忽略的知识点，特别是在做响应式的时候，我们老是会对一些基础的设备概念产生一些疑问，例如：</p>\n<ol>\n<li>px、pt有啥区别呀？</li>\n<li>移动端到底能不能用px？</li>\n</ol>\n<p>我们先了解以下的一些概念。</p>\n<h2 id=\"1-物理像素-—-Device-Pixels\"><a href=\"#1-物理像素-—-Device-Pixels\" class=\"headerlink\" title=\"1. 物理像素 — Device Pixels\"></a>1. 物理像素 — Device Pixels</h2><p>显示屏的成像原理：通过一系列的小点排列成一个大的矩形，不同的小点通过显示不同的颜色来显示成图像。</p>\n<p>单位pt，属于真正的绝对单位，代表一个像素点。</p>\n<h2 id=\"2-逻辑像素-Logical-Pixel\"><a href=\"#2-逻辑像素-Logical-Pixel\" class=\"headerlink\" title=\"2. 逻辑像素 - Logical Pixel\"></a>2. 逻辑像素 - Logical Pixel</h2><p>逻辑像素也可以称为设备独立像素 DIP(Device independent Pixel)</p>\n<p>CSS像素单位是px（CSS pixel），浏览器里的一切长度都是以 px（CSS像素）为单位。</p>\n<blockquote>\n<p>一般情况下来说， CSS像素 = 独立像素 = 逻辑像素 </p>\n</blockquote>\n<h2 id=\"3-设备像素比-—-Device-Pixel-Ratio\"><a href=\"#3-设备像素比-—-Device-Pixel-Ratio\" class=\"headerlink\" title=\"3. 设备像素比 — Device Pixel Ratio\"></a>3. 设备像素比 — Device Pixel Ratio</h2><p>设备像素比(DPR)是默认缩放为100%的情况下，物理像素和逻辑像素的比值</p>\n<blockquote>\n<p>DPR = 物理像素 / 逻辑像素(某一方向上)</p>\n</blockquote>\n<p>在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它就是DPR。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">window</span>.devicePixelRatio</span><br></pre></td></tr></table></figure>\n<p>例如 IPhoneX 的 devicePixelRatio = 3，如下图。</p>\n<p><img src=\"ipx.png\" alt=\"IPhoneX DPR\"></p>\n<p>而前几代 iphone 6/7/8 采用的同样的屏幕，devicePixelRatio = 2</p>\n<p><img src=\"ip7.png\" alt=\"old IPhone DPR\"></p>\n<p>所以 IPhoneX 的屏幕比 IPhone7 更高清。</p>\n<h2 id=\"4-像素密度-Pixels-Per-Inch\"><a href=\"#4-像素密度-Pixels-Per-Inch\" class=\"headerlink\" title=\"4. 像素密度 - Pixels Per Inch\"></a>4. 像素密度 - Pixels Per Inch</h2><p>每英寸像素取值，更确切的说法应该是像素密度，也就是衡量单位物理面积内拥有像素值的情况。</p>\n<p><img src=\"ppi.png\" alt=\"PPI\"></p>\n<p>高PPI的设备中，一个CSS像素通常等于两个甚至三个物理像素。</p>\n<blockquote>\n<p>PPI通常是判断设备屏幕清晰度的重要参数，所以我们买设备的时候可以重点关注这个参数哟（设备分辨率高可不一定代表高清哟～）</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>设备屏幕，有一些容易被我们忽略的知识点，特别是在做响应式的时候，我们老是会对一些基础的设备概念产生一些疑问，例如：</p>\n<ol>\n<li>px、pt有啥区别呀？</li>\n<li>移动端到底能不能用px？</li>\n</ol>\n<p>我们先了解以下的一些概念。</p>\n<h2 id=\"1-物理像素-—-Device-Pixels\"><a href=\"#1-物理像素-—-Device-Pixels\" class=\"headerlink\" title=\"1. 物理像素 — Device Pixels\"></a>1. 物理像素 — Device Pixels</h2><p>显示屏的成像原理：通过一系列的小点排列成一个大的矩形，不同的小点通过显示不同的颜色来显示成图像。</p>\n<p>单位pt，属于真正的绝对单位，代表一个像素点。</p>\n<h2 id=\"2-逻辑像素-Logical-Pixel\"><a href=\"#2-逻辑像素-Logical-Pixel\" class=\"headerlink\" title=\"2. 逻辑像素 - Logical Pixel\"></a>2. 逻辑像素 - Logical Pixel</h2><p>逻辑像素也可以称为设备独立像素 DIP(Device independent Pixel)</p>\n<p>CSS像素单位是px（CSS pixel），浏览器里的一切长度都是以 px（CSS像素）为单位。</p>\n<blockquote>\n<p>一般情况下来说， CSS像素 = 独立像素 = 逻辑像素 </p>\n</blockquote>\n<h2 id=\"3-设备像素比-—-Device-Pixel-Ratio\"><a href=\"#3-设备像素比-—-Device-Pixel-Ratio\" class=\"headerlink\" title=\"3. 设备像素比 — Device Pixel Ratio\"></a>3. 设备像素比 — Device Pixel Ratio</h2><p>设备像素比(DPR)是默认缩放为100%的情况下，物理像素和逻辑像素的比值</p>\n<blockquote>\n<p>DPR = 物理像素 / 逻辑像素(某一方向上)</p>\n</blockquote>\n<p>在移动端浏览器中以及某些桌面浏览器中，window对象有一个devicePixelRatio属性，它就是DPR。</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt; <span class=\"built_in\">window</span>.devicePixelRatio</span><br></pre></td></tr></table></figure>\n<p>例如 IPhoneX 的 devicePixelRatio = 3，如下图。</p>\n<p><img src=\"ipx.png\" alt=\"IPhoneX DPR\"></p>\n<p>而前几代 iphone 6/7/8 采用的同样的屏幕，devicePixelRatio = 2</p>\n<p><img src=\"ip7.png\" alt=\"old IPhone DPR\"></p>\n<p>所以 IPhoneX 的屏幕比 IPhone7 更高清。</p>\n<h2 id=\"4-像素密度-Pixels-Per-Inch\"><a href=\"#4-像素密度-Pixels-Per-Inch\" class=\"headerlink\" title=\"4. 像素密度 - Pixels Per Inch\"></a>4. 像素密度 - Pixels Per Inch</h2><p>每英寸像素取值，更确切的说法应该是像素密度，也就是衡量单位物理面积内拥有像素值的情况。</p>\n<p><img src=\"ppi.png\" alt=\"PPI\"></p>\n<p>高PPI的设备中，一个CSS像素通常等于两个甚至三个物理像素。</p>\n<blockquote>\n<p>PPI通常是判断设备屏幕清晰度的重要参数，所以我们买设备的时候可以重点关注这个参数哟（设备分辨率高可不一定代表高清哟～）</p>\n</blockquote>\n"},{"title":"npm各种常用配置","date":"2021-01-20T16:09:28.000Z","describe":"ddd","_content":"\n在日常前端开发过程中npm，可以说是我们最常用的包管理器。而其中配置，并不少所有小伙伴都了解的，下边我们介绍下一些最常用的。\n\n## 1. 下载依赖慢，老是网络中断怎么办？（registry配置）\n\n例如我在命令行中，输入\n\n```\n>npm config list\n\n//系统输出\nalex@AlexdeMacBook-Pro blog % npm config list\n; \"user\" config from /Users/xxx/.npmrc\n\nregistry = \"https://registry.npm.taobao.org/\" \n\n……\n\n```\n\n在上边 `registry = \"https://registry.npm.taobao.org/\"` 代表我设置了淘宝的registry仓库。\n\n> npm 默认设置是它的官方库 http://registry.npmjs.org ，这个大家如果涉及插件开发，都会往这上边传，后续再细说。淘宝的仓库其实也源于npm官方仓库，只不过它会即时去拉取，和使用官方库差不多。\n\n我们通常使用以下命令行去设置仓库指向，\n\n```\n// 设置成淘宝库\nnpm config set registry https://registry.npm.taobao.org\n\n// 设置回npm仓库\nnpm config set registry http://registry.npmjs.org\n```\n\n## 2. 设置别名\n\n如果你们公司有，nexus私有npm仓库,你们开发的插件需要存在里边，不推送到公网。那么,可以给你的所有操作，加上 `--registry` 后带仓库地址。\n\n```\n//登录\nnpm login --registry http://nexus.x.x/repository/npm-hosted/\n\n//发布\nnpm publish --registry http://nexus.x.x/repository/npm-hosted/\n```\n\n通常情况下，我们同时也想使用公有淘宝or npm 镜像，可以做以下配置。\n\n我们的插件以@yzy为组，设置特殊组插件使用私有镜像库。\n\n```\n//设置@yzy组的registry到私有库\nnpm config set @yzy:registry http://nexus.x.x/repository/npm-hosted/\n```\n\n只要包带 `@yzy`的，都会去 `http://nexus.x.x/repository/npm-hosted/` 下载\n\n## 3. 通过npm安装yarn\n\n如果npm使用烦了，可以偶尔使用下yarn\n\n按照指令\n\n```\nnpm i yarn -g\n```\n\n> npm是牛b的，这个命令翻译下就是：我（npm）允许你选择我的潜在对手（yarn），甚至我还帮你引荐！\n\n","source":"_posts/taobao.md","raw":"---\ntitle: npm各种常用配置\ndate: 2021-01-21 00:09:28\ndescribe: ddd\ntags:\n    - npm\n---\n\n在日常前端开发过程中npm，可以说是我们最常用的包管理器。而其中配置，并不少所有小伙伴都了解的，下边我们介绍下一些最常用的。\n\n## 1. 下载依赖慢，老是网络中断怎么办？（registry配置）\n\n例如我在命令行中，输入\n\n```\n>npm config list\n\n//系统输出\nalex@AlexdeMacBook-Pro blog % npm config list\n; \"user\" config from /Users/xxx/.npmrc\n\nregistry = \"https://registry.npm.taobao.org/\" \n\n……\n\n```\n\n在上边 `registry = \"https://registry.npm.taobao.org/\"` 代表我设置了淘宝的registry仓库。\n\n> npm 默认设置是它的官方库 http://registry.npmjs.org ，这个大家如果涉及插件开发，都会往这上边传，后续再细说。淘宝的仓库其实也源于npm官方仓库，只不过它会即时去拉取，和使用官方库差不多。\n\n我们通常使用以下命令行去设置仓库指向，\n\n```\n// 设置成淘宝库\nnpm config set registry https://registry.npm.taobao.org\n\n// 设置回npm仓库\nnpm config set registry http://registry.npmjs.org\n```\n\n## 2. 设置别名\n\n如果你们公司有，nexus私有npm仓库,你们开发的插件需要存在里边，不推送到公网。那么,可以给你的所有操作，加上 `--registry` 后带仓库地址。\n\n```\n//登录\nnpm login --registry http://nexus.x.x/repository/npm-hosted/\n\n//发布\nnpm publish --registry http://nexus.x.x/repository/npm-hosted/\n```\n\n通常情况下，我们同时也想使用公有淘宝or npm 镜像，可以做以下配置。\n\n我们的插件以@yzy为组，设置特殊组插件使用私有镜像库。\n\n```\n//设置@yzy组的registry到私有库\nnpm config set @yzy:registry http://nexus.x.x/repository/npm-hosted/\n```\n\n只要包带 `@yzy`的，都会去 `http://nexus.x.x/repository/npm-hosted/` 下载\n\n## 3. 通过npm安装yarn\n\n如果npm使用烦了，可以偶尔使用下yarn\n\n按照指令\n\n```\nnpm i yarn -g\n```\n\n> npm是牛b的，这个命令翻译下就是：我（npm）允许你选择我的潜在对手（yarn），甚至我还帮你引荐！\n\n","slug":"taobao","published":1,"updated":"2021-01-21T15:19:36.584Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2x2000dmlq9thp20erz","content":"<p>在日常前端开发过程中npm，可以说是我们最常用的包管理器。而其中配置，并不少所有小伙伴都了解的，下边我们介绍下一些最常用的。</p>\n<h2 id=\"1-下载依赖慢，老是网络中断怎么办？（registry配置）\"><a href=\"#1-下载依赖慢，老是网络中断怎么办？（registry配置）\" class=\"headerlink\" title=\"1. 下载依赖慢，老是网络中断怎么办？（registry配置）\"></a>1. 下载依赖慢，老是网络中断怎么办？（registry配置）</h2><p>例如我在命令行中，输入</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"built_in\">npm</span> config list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>系统输出</span><br><span class=\"line\">alex@AlexdeMacBook-Pro blog % <span class=\"built_in\">npm</span> config list</span><br><span class=\"line\">; <span class=\"string\">\"user\"</span> config <span class=\"keyword\">from</span> <span class=\"regexp\">/Users/xxx/</span>.npmrc</span><br><span class=\"line\"></span><br><span class=\"line\">registry = <span class=\"string\">\"https://registry.npm.taobao.org/\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<p>在上边 <code>registry = &quot;https://registry.npm.taobao.org/&quot;</code> 代表我设置了淘宝的registry仓库。</p>\n<blockquote>\n<p>npm 默认设置是它的官方库 <a href=\"http://registry.npmjs.org\" target=\"_blank\" rel=\"noopener\">http://registry.npmjs.org</a> ，这个大家如果涉及插件开发，都会往这上边传，后续再细说。淘宝的仓库其实也源于npm官方仓库，只不过它会即时去拉取，和使用官方库差不多。</p>\n</blockquote>\n<p>我们通常使用以下命令行去设置仓库指向，</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置成淘宝库</span></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> registry <span class=\"comment\">https:</span>//<span class=\"comment\">registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置回npm仓库</span></span><br><span class=\"line\">npm <span class=\"comment\">config set registry http:</span>//<span class=\"comment\">registry.npmjs.org</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-设置别名\"><a href=\"#2-设置别名\" class=\"headerlink\" title=\"2. 设置别名\"></a>2. 设置别名</h2><p>如果你们公司有，nexus私有npm仓库,你们开发的插件需要存在里边，不推送到公网。那么,可以给你的所有操作，加上 <code>--registry</code> 后带仓库地址。</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/登录</span></span><br><span class=\"line\"><span class=\"regexp\">npm login --registry http:/</span><span class=\"regexp\">/nexus.x.x/repository</span><span class=\"regexp\">/npm-hosted/</span></span><br><span class=\"line\"></span><br><span class=\"line\">/<span class=\"regexp\">/发布</span></span><br><span class=\"line\"><span class=\"regexp\">npm publish --registry http:/</span><span class=\"regexp\">/nexus.x.x/repository</span><span class=\"regexp\">/npm-hosted/</span></span><br></pre></td></tr></table></figure>\n<p>通常情况下，我们同时也想使用公有淘宝or npm 镜像，可以做以下配置。</p>\n<p>我们的插件以@yzy为组，设置特殊组插件使用私有镜像库。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>设置@yzy组的registry到私有库</span><br><span class=\"line\"><span class=\"built_in\">npm</span> config set @yzy:registry http:<span class=\"regexp\">//</span>nexus.x.x<span class=\"regexp\">/repository/npm-hosted/</span></span><br></pre></td></tr></table></figure>\n<p>只要包带 <code>@yzy</code>的，都会去 <code>http://nexus.x.x/repository/npm-hosted/</code> 下载</p>\n<h2 id=\"3-通过npm安装yarn\"><a href=\"#3-通过npm安装yarn\" class=\"headerlink\" title=\"3. 通过npm安装yarn\"></a>3. 通过npm安装yarn</h2><p>如果npm使用烦了，可以偶尔使用下yarn</p>\n<p>按照指令</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> yarn -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm是牛b的，这个命令翻译下就是：我（npm）允许你选择我的潜在对手（yarn），甚至我还帮你引荐！</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p>在日常前端开发过程中npm，可以说是我们最常用的包管理器。而其中配置，并不少所有小伙伴都了解的，下边我们介绍下一些最常用的。</p>\n<h2 id=\"1-下载依赖慢，老是网络中断怎么办？（registry配置）\"><a href=\"#1-下载依赖慢，老是网络中断怎么办？（registry配置）\" class=\"headerlink\" title=\"1. 下载依赖慢，老是网络中断怎么办？（registry配置）\"></a>1. 下载依赖慢，老是网络中断怎么办？（registry配置）</h2><p>例如我在命令行中，输入</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;<span class=\"built_in\">npm</span> config list</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"regexp\">//</span>系统输出</span><br><span class=\"line\">alex@AlexdeMacBook-Pro blog % <span class=\"built_in\">npm</span> config list</span><br><span class=\"line\">; <span class=\"string\">\"user\"</span> config <span class=\"keyword\">from</span> <span class=\"regexp\">/Users/xxx/</span>.npmrc</span><br><span class=\"line\"></span><br><span class=\"line\">registry = <span class=\"string\">\"https://registry.npm.taobao.org/\"</span> </span><br><span class=\"line\"></span><br><span class=\"line\">……</span><br></pre></td></tr></table></figure>\n<p>在上边 <code>registry = &quot;https://registry.npm.taobao.org/&quot;</code> 代表我设置了淘宝的registry仓库。</p>\n<blockquote>\n<p>npm 默认设置是它的官方库 <a href=\"http://registry.npmjs.org\" target=\"_blank\" rel=\"noopener\">http://registry.npmjs.org</a> ，这个大家如果涉及插件开发，都会往这上边传，后续再细说。淘宝的仓库其实也源于npm官方仓库，只不过它会即时去拉取，和使用官方库差不多。</p>\n</blockquote>\n<p>我们通常使用以下命令行去设置仓库指向，</p>\n<figure class=\"highlight gams\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 设置成淘宝库</span></span><br><span class=\"line\">npm config <span class=\"keyword\">set</span> registry <span class=\"comment\">https:</span>//<span class=\"comment\">registry.npm.taobao.org</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 设置回npm仓库</span></span><br><span class=\"line\">npm <span class=\"comment\">config set registry http:</span>//<span class=\"comment\">registry.npmjs.org</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"2-设置别名\"><a href=\"#2-设置别名\" class=\"headerlink\" title=\"2. 设置别名\"></a>2. 设置别名</h2><p>如果你们公司有，nexus私有npm仓库,你们开发的插件需要存在里边，不推送到公网。那么,可以给你的所有操作，加上 <code>--registry</code> 后带仓库地址。</p>\n<figure class=\"highlight crystal\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/<span class=\"regexp\">/登录</span></span><br><span class=\"line\"><span class=\"regexp\">npm login --registry http:/</span><span class=\"regexp\">/nexus.x.x/repository</span><span class=\"regexp\">/npm-hosted/</span></span><br><span class=\"line\"></span><br><span class=\"line\">/<span class=\"regexp\">/发布</span></span><br><span class=\"line\"><span class=\"regexp\">npm publish --registry http:/</span><span class=\"regexp\">/nexus.x.x/repository</span><span class=\"regexp\">/npm-hosted/</span></span><br></pre></td></tr></table></figure>\n<p>通常情况下，我们同时也想使用公有淘宝or npm 镜像，可以做以下配置。</p>\n<p>我们的插件以@yzy为组，设置特殊组插件使用私有镜像库。</p>\n<figure class=\"highlight coffeescript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"regexp\">//</span>设置@yzy组的registry到私有库</span><br><span class=\"line\"><span class=\"built_in\">npm</span> config set @yzy:registry http:<span class=\"regexp\">//</span>nexus.x.x<span class=\"regexp\">/repository/npm-hosted/</span></span><br></pre></td></tr></table></figure>\n<p>只要包带 <code>@yzy</code>的，都会去 <code>http://nexus.x.x/repository/npm-hosted/</code> 下载</p>\n<h2 id=\"3-通过npm安装yarn\"><a href=\"#3-通过npm安装yarn\" class=\"headerlink\" title=\"3. 通过npm安装yarn\"></a>3. 通过npm安装yarn</h2><p>如果npm使用烦了，可以偶尔使用下yarn</p>\n<p>按照指令</p>\n<figure class=\"highlight stylus\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">npm <span class=\"selector-tag\">i</span> yarn -g</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>npm是牛b的，这个命令翻译下就是：我（npm）允许你选择我的潜在对手（yarn），甚至我还帮你引荐！</p>\n</blockquote>\n"},{"title":"macOS GitHub访问过慢问题解决","date":"2021-01-10T09:54:51.000Z","_content":"\n家里 GitHub 访问非常缓慢，百度了几个方法，亲测有效。\n\n方法：本地host地址绑定 \n\n1. 打开[dns查询工具网站](http://tool.chinaz.com/dns) 查询域名github.global.ssl.fastly.net解析获取其IP.\n2. MacOS找到host文件，在finder里边`command`+`shift`+`G`，前往文件夹`/etc/hosts`,里边的`hosts`文件，拷贝到桌面进行编辑后拷贝回来覆盖即可。\n\n```\n//hosts文件中\n127.0.0.1\tlocalhost\n151.101.109.194 github.global.ssl.fastly.net //新增\n```\n\n访问速度可以得到提升","source":"_posts/view-github.md","raw":"---\ntitle: macOS GitHub访问过慢问题解决\ndate: 2021-01-10 17:54:51\ntags:\n    - GitHub\n---\n\n家里 GitHub 访问非常缓慢，百度了几个方法，亲测有效。\n\n方法：本地host地址绑定 \n\n1. 打开[dns查询工具网站](http://tool.chinaz.com/dns) 查询域名github.global.ssl.fastly.net解析获取其IP.\n2. MacOS找到host文件，在finder里边`command`+`shift`+`G`，前往文件夹`/etc/hosts`,里边的`hosts`文件，拷贝到桌面进行编辑后拷贝回来覆盖即可。\n\n```\n//hosts文件中\n127.0.0.1\tlocalhost\n151.101.109.194 github.global.ssl.fastly.net //新增\n```\n\n访问速度可以得到提升","slug":"view-github","published":1,"updated":"2021-01-18T15:42:27.100Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ckk8iy2x4000fmlq9rsorpi9h","content":"<p>家里 GitHub 访问非常缓慢，百度了几个方法，亲测有效。</p>\n<p>方法：本地host地址绑定 </p>\n<ol>\n<li>打开<a href=\"http://tool.chinaz.com/dns\" target=\"_blank\" rel=\"noopener\">dns查询工具网站</a> 查询域名github.global.ssl.fastly.net解析获取其IP.</li>\n<li>MacOS找到host文件，在finder里边<code>command</code>+<code>shift</code>+<code>G</code>，前往文件夹<code>/etc/hosts</code>,里边的<code>hosts</code>文件，拷贝到桌面进行编辑后拷贝回来覆盖即可。</li>\n</ol>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//hosts文件中</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>\tlocalhost</span><br><span class=\"line\"><span class=\"number\">151.101</span><span class=\"number\">.109</span><span class=\"number\">.194</span> github.global.ssl.fastly.net <span class=\"comment\">//新增</span></span><br></pre></td></tr></table></figure>\n<p>访问速度可以得到提升</p>\n","site":{"data":{}},"excerpt":"","more":"<p>家里 GitHub 访问非常缓慢，百度了几个方法，亲测有效。</p>\n<p>方法：本地host地址绑定 </p>\n<ol>\n<li>打开<a href=\"http://tool.chinaz.com/dns\" target=\"_blank\" rel=\"noopener\">dns查询工具网站</a> 查询域名github.global.ssl.fastly.net解析获取其IP.</li>\n<li>MacOS找到host文件，在finder里边<code>command</code>+<code>shift</code>+<code>G</code>，前往文件夹<code>/etc/hosts</code>,里边的<code>hosts</code>文件，拷贝到桌面进行编辑后拷贝回来覆盖即可。</li>\n</ol>\n<figure class=\"highlight lsl\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//hosts文件中</span></span><br><span class=\"line\"><span class=\"number\">127.0</span><span class=\"number\">.0</span><span class=\"number\">.1</span>\tlocalhost</span><br><span class=\"line\"><span class=\"number\">151.101</span><span class=\"number\">.109</span><span class=\"number\">.194</span> github.global.ssl.fastly.net <span class=\"comment\">//新增</span></span><br></pre></td></tr></table></figure>\n<p>访问速度可以得到提升</p>\n"}],"PostAsset":[{"_id":"source/_posts/git-commit/install.jpg","post":"ckk8iy2wi0001mlq9nd81dy2e","slug":"install.jpg","modified":1,"renderable":1},{"_id":"source/_posts/git-commit/use.jpg","post":"ckk8iy2wi0001mlq9nd81dy2e","slug":"use.jpg","modified":1,"renderable":1},{"_id":"source/_posts/screen/ip7.png","slug":"ip7.png","post":"ckk8iy2x0000cmlq93ad0zjvq","modified":1,"renderable":0},{"_id":"source/_posts/screen/ipx.png","slug":"ipx.png","post":"ckk8iy2x0000cmlq93ad0zjvq","modified":1,"renderable":0},{"_id":"source/_posts/screen/ppi.png","post":"ckk8iy2x0000cmlq93ad0zjvq","slug":"ppi.png","modified":1,"renderable":1}],"PostCategory":[],"PostTag":[{"post_id":"ckk8iy2wo0003mlq9ig53ew6a","tag_id":"ckk8iy2ws0006mlq9ilr1vub8","_id":"ckk8iy2x0000bmlq9kjf9p6lu"},{"post_id":"ckk8iy2wr0005mlq91e79w0oo","tag_id":"ckk8iy2x0000amlq96cw6nmre","_id":"ckk8iy2x4000gmlq9j2xd3c92"},{"post_id":"ckk8iy2wu0007mlq9dr3l47jl","tag_id":"ckk8iy2x3000emlq9efesa79c","_id":"ckk8iy2x5000imlq9lnau9f9g"},{"post_id":"ckk8iy2ww0008mlq9xpnpe7ei","tag_id":"ckk8iy2x5000hmlq9hwrnakst","_id":"ckk8iy2x7000kmlq99crhie3l"},{"post_id":"ckk8iy2wx0009mlq9z1i9sxnt","tag_id":"ckk8iy2x0000amlq96cw6nmre","_id":"ckk8iy2x8000mmlq9ois8stsd"},{"post_id":"ckk8iy2x0000cmlq93ad0zjvq","tag_id":"ckk8iy2x3000emlq9efesa79c","_id":"ckk8iy2x8000omlq9zubzeg4v"},{"post_id":"ckk8iy2x2000dmlq9thp20erz","tag_id":"ckk8iy2x8000nmlq9bkoe37rd","_id":"ckk8iy2x9000qmlq9o2r4asq5"},{"post_id":"ckk8iy2x4000fmlq9rsorpi9h","tag_id":"ckk8iy2x8000pmlq9ps7yx6ml","_id":"ckk8iy2x9000rmlq92hqqpehu"},{"post_id":"ckk8iy2wi0001mlq9nd81dy2e","tag_id":"ckk8iy2ws0006mlq9ilr1vub8","_id":"ckk8iyqj0000smlq9nm8g4tun"}],"Tag":[{"name":"Git","_id":"ckk8iy2ws0006mlq9ilr1vub8"},{"name":"系统","_id":"ckk8iy2x0000amlq96cw6nmre"},{"name":"前端","_id":"ckk8iy2x3000emlq9efesa79c"},{"name":"工作方法","_id":"ckk8iy2x5000hmlq9hwrnakst"},{"name":"npm","_id":"ckk8iy2x8000nmlq9bkoe37rd"},{"name":"GitHub","_id":"ckk8iy2x8000pmlq9ps7yx6ml"}]}}